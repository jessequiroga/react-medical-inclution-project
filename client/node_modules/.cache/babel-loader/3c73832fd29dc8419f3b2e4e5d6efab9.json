{"ast":null,"code":"import { defaults } from './utils.js';\nimport request from './request.js';\n\nconst getDefaults = () => {\n  return {\n    loadPath: '/locales/{{lng}}/{{ns}}.json',\n    addPath: '/locales/add/{{lng}}/{{ns}}',\n    allowMultiLoading: false,\n    parse: data => JSON.parse(data),\n    stringify: JSON.stringify,\n    parsePayload: (namespace, key, fallbackValue) => ({\n      [key]: fallbackValue || ''\n    }),\n    request,\n    reloadInterval: false,\n    customHeaders: {},\n    queryStringParams: {},\n    crossDomain: false,\n    // used for XmlHttpRequest\n    withCredentials: false,\n    // used for XmlHttpRequest\n    overrideMimeType: false,\n    // used for XmlHttpRequest\n    requestOptions: {\n      // used for fetch\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'default'\n    }\n  };\n};\n\nclass Backend {\n  constructor(services, options = {}, allOptions = {}) {\n    this.services = services;\n    this.options = options;\n    this.allOptions = allOptions;\n    this.type = 'backend';\n    this.init(services, options, allOptions);\n  }\n\n  init(services, options = {}, allOptions = {}) {\n    this.services = services;\n    this.options = defaults(options, this.options || {}, getDefaults());\n    this.allOptions = allOptions;\n\n    if (this.options.reloadInterval) {\n      setInterval(() => this.reload(), this.options.reloadInterval);\n    }\n  }\n\n  readMulti(languages, namespaces, callback) {\n    var loadPath = this.options.loadPath;\n\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath(languages, namespaces);\n    }\n\n    const url = this.services.interpolator.interpolate(loadPath, {\n      lng: languages.join('+'),\n      ns: namespaces.join('+')\n    });\n    this.loadUrl(url, callback, languages, namespaces);\n  }\n\n  read(language, namespace, callback) {\n    var loadPath = this.options.loadPath;\n\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath([language], [namespace]);\n    }\n\n    const url = this.services.interpolator.interpolate(loadPath, {\n      lng: language,\n      ns: namespace\n    });\n    this.loadUrl(url, callback, language, namespace);\n  }\n\n  loadUrl(url, callback, languages, namespaces) {\n    this.options.request(this.options, url, (err, res) => {\n      if (res && res.status >= 500 && res.status < 600) return callback('failed loading ' + url, true\n      /* retry */\n      );\n      if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url, false\n      /* no retry */\n      );\n      if (err) return callback(err, false);\n      let ret, parseErr;\n\n      try {\n        ret = this.options.parse(res.data, languages, namespaces);\n      } catch (e) {\n        parseErr = 'failed parsing ' + url + ' to json';\n      }\n\n      if (parseErr) return callback(parseErr, false);\n      callback(null, ret);\n    });\n  }\n\n  create(languages, namespace, key, fallbackValue) {\n    if (typeof languages === 'string') languages = [languages];\n    const payload = this.options.parsePayload(namespace, key, fallbackValue);\n    languages.forEach(lng => {\n      const url = this.services.interpolator.interpolate(this.options.addPath, {\n        lng: lng,\n        ns: namespace\n      });\n      this.options.request(this.options, url, payload, (data, res) => {// TODO: if res.status === 4xx do log\n      });\n    });\n  }\n\n  reload() {\n    const {\n      backendConnector,\n      languageUtils,\n      logger\n    } = this.services;\n    const currentLanguage = backendConnector.language;\n    if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return; // avoid loading resources for cimode\n\n    const toLoad = [];\n\n    const append = lng => {\n      const lngs = languageUtils.toResolveHierarchy(lng);\n      lngs.forEach(l => {\n        if (toLoad.indexOf(l) < 0) toLoad.push(l);\n      });\n    };\n\n    append(currentLanguage);\n    if (this.allOptions.preload) this.allOptions.preload.forEach(l => append(l));\n    toLoad.forEach(lng => {\n      this.allOptions.ns.forEach(ns => {\n        backendConnector.read(lng, ns, 'read', null, null, (err, data) => {\n          if (err) logger.warn(`loading namespace ${ns} for language ${lng} failed`, err);\n          if (!err && data) logger.log(`loaded namespace ${ns} for language ${lng}`, data);\n          backendConnector.loaded(`${lng}|${ns}`, err, data);\n        });\n      });\n    });\n  }\n\n}\n\nBackend.type = 'backend';\nexport default Backend;","map":{"version":3,"sources":["/Users/etl/Documents/react-medical-inclution-project/client/node_modules/i18next-http-backend/lib/index.js"],"names":["defaults","request","getDefaults","loadPath","addPath","allowMultiLoading","parse","data","JSON","stringify","parsePayload","namespace","key","fallbackValue","reloadInterval","customHeaders","queryStringParams","crossDomain","withCredentials","overrideMimeType","requestOptions","mode","credentials","cache","Backend","constructor","services","options","allOptions","type","init","setInterval","reload","readMulti","languages","namespaces","callback","url","interpolator","interpolate","lng","join","ns","loadUrl","read","language","err","res","status","ret","parseErr","e","create","payload","forEach","backendConnector","languageUtils","logger","currentLanguage","toLowerCase","toLoad","append","lngs","toResolveHierarchy","l","indexOf","push","preload","warn","log","loaded"],"mappings":"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","sourcesContent":["import { defaults } from './utils.js'\nimport request from './request.js'\n\nconst getDefaults = () => {\n  return {\n    loadPath: '/locales/{{lng}}/{{ns}}.json',\n    addPath: '/locales/add/{{lng}}/{{ns}}',\n    allowMultiLoading: false,\n    parse: data => JSON.parse(data),\n    stringify: JSON.stringify,\n    parsePayload: (namespace, key, fallbackValue) => ({ [key]: fallbackValue || '' }),\n    request,\n    reloadInterval: false,\n    customHeaders: {},\n    queryStringParams: {},\n    crossDomain: false, // used for XmlHttpRequest\n    withCredentials: false, // used for XmlHttpRequest\n    overrideMimeType: false, // used for XmlHttpRequest\n    requestOptions: { // used for fetch\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'default'\n    }\n  }\n}\n\nclass Backend {\n  constructor (services, options = {}, allOptions = {}) {\n    this.services = services\n    this.options = options\n    this.allOptions = allOptions\n    this.type = 'backend'\n    this.init(services, options, allOptions)\n  }\n\n  init (services, options = {}, allOptions = {}) {\n    this.services = services\n    this.options = defaults(options, this.options || {}, getDefaults())\n    this.allOptions = allOptions\n    if (this.options.reloadInterval) {\n      setInterval(() => this.reload(), this.options.reloadInterval)\n    }\n  }\n\n  readMulti (languages, namespaces, callback) {\n    var loadPath = this.options.loadPath\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath(languages, namespaces)\n    }\n    const url = this.services.interpolator.interpolate(loadPath, { lng: languages.join('+'), ns: namespaces.join('+') })\n    this.loadUrl(url, callback, languages, namespaces)\n  }\n\n  read (language, namespace, callback) {\n    var loadPath = this.options.loadPath\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath([language], [namespace])\n    }\n    const url = this.services.interpolator.interpolate(loadPath, { lng: language, ns: namespace })\n    this.loadUrl(url, callback, language, namespace)\n  }\n\n  loadUrl (url, callback, languages, namespaces) {\n    this.options.request(this.options, url, (err, res) => {\n      if (res && res.status >= 500 && res.status < 600) return callback('failed loading ' + url, true /* retry */)\n      if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url, false /* no retry */)\n      if (err) return callback(err, false)\n\n      let ret, parseErr\n      try {\n        ret = this.options.parse(res.data, languages, namespaces)\n      } catch (e) {\n        parseErr = 'failed parsing ' + url + ' to json'\n      }\n      if (parseErr) return callback(parseErr, false)\n      callback(null, ret)\n    })\n  }\n\n  create (languages, namespace, key, fallbackValue) {\n    if (typeof languages === 'string') languages = [languages]\n    const payload = this.options.parsePayload(namespace, key, fallbackValue)\n    languages.forEach(lng => {\n      const url = this.services.interpolator.interpolate(this.options.addPath, { lng: lng, ns: namespace })\n      this.options.request(this.options, url, payload, (data, res) => {\n        // TODO: if res.status === 4xx do log\n      })\n    })\n  }\n\n  reload () {\n    const { backendConnector, languageUtils, logger } = this.services\n    const currentLanguage = backendConnector.language\n    if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return // avoid loading resources for cimode\n\n    const toLoad = []\n    const append = (lng) => {\n      const lngs = languageUtils.toResolveHierarchy(lng)\n      lngs.forEach(l => {\n        if (toLoad.indexOf(l) < 0) toLoad.push(l)\n      })\n    }\n\n    append(currentLanguage)\n\n    if (this.allOptions.preload) this.allOptions.preload.forEach((l) => append(l))\n\n    toLoad.forEach(lng => {\n      this.allOptions.ns.forEach(ns => {\n        backendConnector.read(lng, ns, 'read', null, null, (err, data) => {\n          if (err) logger.warn(`loading namespace ${ns} for language ${lng} failed`, err)\n          if (!err && data) logger.log(`loaded namespace ${ns} for language ${lng}`, data)\n\n          backendConnector.loaded(`${lng}|${ns}`, err, data)\n        })\n      })\n    })\n  }\n}\n\nBackend.type = 'backend'\n\nexport default Backend\n"]},"metadata":{},"sourceType":"module"}