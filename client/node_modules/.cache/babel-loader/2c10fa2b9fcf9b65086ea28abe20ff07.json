{"ast":null,"code":"import * as fetchNode from './getFetch.cjs';\nlet fetchApi;\n\nif (typeof fetch === 'function') {\n  if (typeof global !== 'undefined' && global.fetch) {\n    fetchApi = global.fetch;\n  } else if (typeof window !== 'undefined' && window.fetch) {\n    fetchApi = window.fetch;\n  }\n}\n\nlet XmlHttpRequestApi;\n\nif (typeof XMLHttpRequest === 'function') {\n  if (typeof global !== 'undefined' && global.XMLHttpRequest) {\n    XmlHttpRequestApi = global.XMLHttpRequest;\n  } else if (typeof window !== 'undefined' && window.XMLHttpRequest) {\n    XmlHttpRequestApi = window.XMLHttpRequest;\n  }\n}\n\nlet ActiveXObjectApi;\n\nif (typeof ActiveXObject === 'function') {\n  if (typeof global !== 'undefined' && global.ActiveXObject) {\n    ActiveXObjectApi = global.ActiveXObject;\n  } else if (typeof window !== 'undefined' && window.ActiveXObject) {\n    ActiveXObjectApi = window.ActiveXObject;\n  }\n}\n\nif (!fetchApi && fetchNode) fetchApi = fetchNode.default || fetchNode; // because of strange export\n\nconst addQueryString = (url, params) => {\n  if (params && typeof params === 'object') {\n    let queryString = ''; // Must encode data\n\n    for (const paramName in params) {\n      queryString += '&' + encodeURIComponent(paramName) + '=' + encodeURIComponent(params[paramName]);\n    }\n\n    if (!queryString) return url;\n    url = url + (url.indexOf('?') !== -1 ? '&' : '?') + queryString.slice(1);\n  }\n\n  return url;\n}; // fetch api stuff\n\n\nconst requestWithFetch = (options, url, payload, callback) => {\n  if (options.queryStringParams) {\n    url = addQueryString(url, options.queryStringParams);\n  }\n\n  const headers = { ...(options.customHeaders || {})\n  };\n  if (payload) headers['Content-Type'] = 'application/json';\n  fetchApi(url, {\n    method: payload ? 'POST' : 'GET',\n    body: payload ? options.stringify(payload) : undefined,\n    headers,\n    ...options.srequestOptions\n  }).then(response => {\n    if (!response.ok) return callback(response.statusText || 'Error', {\n      status: response.status\n    });\n    response.text().then(data => {\n      callback(null, {\n        status: response.status,\n        data\n      });\n    }).catch(callback);\n  }).catch(callback);\n}; // xml http request stuff\n\n\nconst requestWithXmlHttpRequest = (options, url, payload, callback) => {\n  if (payload && typeof payload === 'object') {\n    // if (!cache) payload._t = Date.now()\n    // URL encoded form payload must be in querystring format\n    payload = addQueryString('', payload).slice(1);\n  }\n\n  if (options.queryStringParams) {\n    url = addQueryString(url, options.queryStringParams);\n  }\n\n  try {\n    let x;\n\n    if (XmlHttpRequestApi) {\n      x = new XmlHttpRequestApi();\n    } else {\n      x = new ActiveXObjectApi('MSXML2.XMLHTTP.3.0');\n    }\n\n    x.open(payload ? 'POST' : 'GET', url, 1);\n\n    if (!options.crossDomain) {\n      x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    }\n\n    x.withCredentials = !!options.withCredentials;\n\n    if (payload) {\n      x.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    if (x.overrideMimeType) {\n      x.overrideMimeType('application/json');\n    }\n\n    let h = options.customHeaders;\n    h = typeof h === 'function' ? h() : h;\n\n    if (h) {\n      for (var i in h) {\n        x.setRequestHeader(i, h[i]);\n      }\n    }\n\n    x.onreadystatechange = () => {\n      x.readyState > 3 && callback(x.statusText, {\n        status: x.status,\n        data: x.responseText\n      });\n    };\n\n    x.send(payload);\n  } catch (e) {\n    console && console.log(e);\n  }\n};\n\nconst request = (options, url, payload, callback) => {\n  if (typeof payload === 'function') {\n    callback = payload;\n    payload = undefined;\n  }\n\n  callback = callback || (() => {});\n\n  if (fetchApi) {\n    // use fetch api\n    return requestWithFetch(options, url, payload, callback);\n  }\n\n  if (typeof XMLHttpRequest === 'function' || typeof ActiveXObject === 'function') {\n    // use xml http request\n    return requestWithXmlHttpRequest(options, url, payload, callback);\n  } // import('node-fetch').then((fetch) => {\n  //   fetchApi = fetch.default || fetch // because of strange export of node-fetch\n  //   requestWithFetch(options, url, payload, callback)\n  // }).catch(callback)\n\n};\n\nexport default request;","map":{"version":3,"sources":["/Users/etl/Documents/react-medical-inclution-project/client/node_modules/i18next-http-backend/lib/request.js"],"names":["fetchNode","fetchApi","fetch","global","window","XmlHttpRequestApi","XMLHttpRequest","ActiveXObjectApi","ActiveXObject","default","addQueryString","url","params","queryString","paramName","encodeURIComponent","indexOf","slice","requestWithFetch","options","payload","callback","queryStringParams","headers","customHeaders","method","body","stringify","undefined","srequestOptions","then","response","ok","statusText","status","text","data","catch","requestWithXmlHttpRequest","x","open","crossDomain","setRequestHeader","withCredentials","overrideMimeType","h","i","onreadystatechange","readyState","responseText","send","e","console","log","request"],"mappings":"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","sourcesContent":["import * as fetchNode from './getFetch.cjs'\n\nlet fetchApi\nif (typeof fetch === 'function') {\n  if (typeof global !== 'undefined' && global.fetch) {\n    fetchApi = global.fetch\n  } else if (typeof window !== 'undefined' && window.fetch) {\n    fetchApi = window.fetch\n  }\n}\nlet XmlHttpRequestApi\nif (typeof XMLHttpRequest === 'function') {\n  if (typeof global !== 'undefined' && global.XMLHttpRequest) {\n    XmlHttpRequestApi = global.XMLHttpRequest\n  } else if (typeof window !== 'undefined' && window.XMLHttpRequest) {\n    XmlHttpRequestApi = window.XMLHttpRequest\n  }\n}\nlet ActiveXObjectApi\nif (typeof ActiveXObject === 'function') {\n  if (typeof global !== 'undefined' && global.ActiveXObject) {\n    ActiveXObjectApi = global.ActiveXObject\n  } else if (typeof window !== 'undefined' && window.ActiveXObject) {\n    ActiveXObjectApi = window.ActiveXObject\n  }\n}\nif (!fetchApi && fetchNode) fetchApi = fetchNode.default || fetchNode // because of strange export\n\nconst addQueryString = (url, params) => {\n  if (params && typeof params === 'object') {\n    let queryString = ''\n    // Must encode data\n    for (const paramName in params) {\n      queryString += '&' + encodeURIComponent(paramName) + '=' + encodeURIComponent(params[paramName])\n    }\n    if (!queryString) return url\n    url = url + (url.indexOf('?') !== -1 ? '&' : '?') + queryString.slice(1)\n  }\n  return url\n}\n\n// fetch api stuff\nconst requestWithFetch = (options, url, payload, callback) => {\n  if (options.queryStringParams) {\n    url = addQueryString(url, options.queryStringParams)\n  }\n  const headers = { ...(options.customHeaders || {}) }\n  if (payload) headers['Content-Type'] = 'application/json'\n  fetchApi(url, {\n    method: payload ? 'POST' : 'GET',\n    body: payload ? options.stringify(payload) : undefined,\n    headers,\n    ...options.srequestOptions\n  }).then((response) => {\n    if (!response.ok) return callback(response.statusText || 'Error', { status: response.status })\n    response.text().then((data) => {\n      callback(null, { status: response.status, data })\n    }).catch(callback)\n  }).catch(callback)\n}\n\n// xml http request stuff\nconst requestWithXmlHttpRequest = (options, url, payload, callback) => {\n  if (payload && typeof payload === 'object') {\n    // if (!cache) payload._t = Date.now()\n    // URL encoded form payload must be in querystring format\n    payload = addQueryString('', payload).slice(1)\n  }\n\n  if (options.queryStringParams) {\n    url = addQueryString(url, options.queryStringParams)\n  }\n\n  try {\n    let x\n    if (XmlHttpRequestApi) {\n      x = new XmlHttpRequestApi()\n    } else {\n      x = new ActiveXObjectApi('MSXML2.XMLHTTP.3.0')\n    }\n    x.open(payload ? 'POST' : 'GET', url, 1)\n    if (!options.crossDomain) {\n      x.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n    }\n    x.withCredentials = !!options.withCredentials\n    if (payload) {\n      x.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    }\n    if (x.overrideMimeType) {\n      x.overrideMimeType('application/json')\n    }\n    let h = options.customHeaders\n    h = typeof h === 'function' ? h() : h\n    if (h) {\n      for (var i in h) {\n        x.setRequestHeader(i, h[i])\n      }\n    }\n    x.onreadystatechange = () => {\n      x.readyState > 3 && callback(x.statusText, { status: x.status, data: x.responseText })\n    }\n    x.send(payload)\n  } catch (e) {\n    console && console.log(e)\n  }\n}\n\nconst request = (options, url, payload, callback) => {\n  if (typeof payload === 'function') {\n    callback = payload\n    payload = undefined\n  }\n  callback = callback || (() => {})\n\n  if (fetchApi) {\n    // use fetch api\n    return requestWithFetch(options, url, payload, callback)\n  }\n\n  if (typeof XMLHttpRequest === 'function' || typeof ActiveXObject === 'function') {\n    // use xml http request\n    return requestWithXmlHttpRequest(options, url, payload, callback)\n  }\n\n  // import('node-fetch').then((fetch) => {\n  //   fetchApi = fetch.default || fetch // because of strange export of node-fetch\n  //   requestWithFetch(options, url, payload, callback)\n  // }).catch(callback)\n}\n\nexport default request\n"]},"metadata":{},"sourceType":"module"}